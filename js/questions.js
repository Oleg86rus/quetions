/*

---------------------------------------------------------------------------------------------
1. Можно ли таким образом создать полную глубокую копию массива arr?
const arr = [
  {id:0, name: 'aaa'},
  {id:0, name: 'aaa'},
  {id:0, name: 'aaa'}
]
const cloneArray = [...arr]
console.log(cloneArray)

Да
+++Нет


---------------------------------------------------------------------------------------------
2. Proxy позволяет…

Выполнять какие-то действия при обращении к серверу (посредник между пользователем и целевым сервером)
+++Перехватывать и переопределять основные операции для объекта
Добавлять конфигурацию VPN при запросах на сервер в коде
Шифровать трафик между клиентом и сервером

Правильный ответ
Перехватывать и переопределять основные операции для объекта

---------------------------------------------------------------------------------------------
3. Если в выражении с использованием логического оператора ИЛИ (||) все операнды приводятся к false (все являются falsy значениями https://developer.mozilla.org/ru/docs/Glossary/Falsy), то вернется:

Первое truthy значение
Последнее truthy значение
Первое falsy значение
+++Последнее falsy значение
true
false

---------------------------------------------------------------------------------------------
4. Если в выражении с использованием логического оператора И (&&) будет больше одного операнда, который приводится к false (будут являться falsy значениями https://developer.mozilla.org/ru/docs/Glossary/Falsy), то вернется:

Первое truthy значение
Последнее truthy значение
+++Первое falsy значение
Последнее falsy значение
true
false

---------------------------------------------------------------------------------------------
5. Какими способами получится преобразовать переменную a к типу данных Boolean?


a.toBoolean()
++a
+++!!a
Bool(a)
Bool.call(this, a)
+++Boolean(a)
Convert.ToBoolen(a)
+++Boolean.call(this, a)
Convert.ToBoolen.call(this, a)

---------------------------------------------------------------------------------------------
6. В данном примере функция foo() объявляется как…
function foo() {...}

+++Function declaration
Function expression

---------------------------------------------------------------------------------------------
7. В данном примере функция foo() объявляется как…
const foo = function(){...}

Function declaration
+++Function expression

---------------------------------------------------------------------------------------------
8. Чем является this на самом верхнем уровне в браузере?

document
undefined
Object
+++window
null

---------------------------------------------------------------------------------------------
9. Что находит данное упрощенное регулярное выражение?

username
номер телефона
даты
+++email

---------------------------------------------------------------------------------------------
10. Синтаксис классов в JavaScript…

Появился в ES5
+++Появился в ES6
Появился в ES7
Изначально присутствовал языке

---------------------------------------------------------------------------------------------
11. Каким здесь будет this?
foo.bar()

Зависит от того, где вызвана функция
bar()
window
+++foo()
undefined

Правильный ответ
foo()

---------------------------------------------------------------------------------------------
12. Выберите верное утверждение:


Данный код сработает, но будет предупреждение
Данный код не сработает, так как у bar() отсутствует контекст
Данный код не сработает, так как нельзя объявлять функции внутри методов класса
Данный код сработает, но в Strict mode будет ошибка
+++Данный код не сработает, так как у baz() отсутствует контекст
Данный код не сработает, так как нельзя вызывать метод у экземпляра класса таким образом: new Foo().bar()
Данный код сработает без каких-либо проблем

---------------------------------------------------------------------------------------------
13. Возможно ли вызвать данную функцию таким образом, чтобы она вернула число?

Нет
+++Да
Да, но будет предупреждение
Да, но в Strict mode будет ошибка

---------------------------------------------------------------------------------------------
14. Почему сначала выведется 100000 раз цифра 1, а только потом 0?


Так как движок языка устроен таким образом, что он сначала выполняет более ресурсоемкие операции, а затем менее ресурсоемкие
+++Так как вызов setTimeout() - асинхронная операция, которая вызовется только после синхронных
Так как цикл for имеет приоритет при выполнении кода
Будет по разному. Иногда сначала вызовется setTimeout() и код уйдет в цикл, а иногда наоборот.

---------------------------------------------------------------------------------------------
15. У нас есть данные о пользователе, которые хранятся в БД. Необходимо обновить только имя пользователя. Какой HTTP метод стоит использовать?


POST
PUT
+++PATCH
DELETE
GET
OPTIONS
HEAD
TRACE

Правильный ответ
PATCH

---------------------------------------------------------------------------------------------
 16. В чем отличие export от export default?


export default полезен для экспорта нескольких величин, причем их имена остаются неизменными. export это “основное” значение, может быть только один в файле
+++export полезен для экспорта нескольких величин, причем их имена остаются неизменными. export default это “основное” значение, может быть только один в файле
export - более новый и сокращенный синтаксис, который стоит использовать вместо export default
Отличий нет

---------------------------------------------------------------------------------------------
17.  Для чего нужны лоадеры в Webpack?


Для загрузки дополнительных плагинов Webpack
Для подключения дополнительных библиотек в JavaScript код
+++Для обработки различных типов файлов
Для ускорения загрузки приложения

---------------------------------------------------------------------------------------------
18. Чем React отличается от React DOM?


React DOM встроен в React и позволяет реализовывать манипуляции с DOM
React отвечает за рендеринг, отрисовку React-элементов в браузере, а React DOM за работу с компонентами, React-элементами и тд
+++React DOM отвечает за рендеринг, отрисовку React-элементов в браузере, а React за работу с компонентами, React-элементами и тд
ReactDOM - старое название React

---------------------------------------------------------------------------------------------
 19. Почему возможно писать JSX в JavaScript файле?


Так как благодаря специальному API в сам JS добавляются новые языковые конструкции, похожие на теги
+++Синтаксис расширяется благодаря Babel, но в дальнейшем код конвертируется в обычный JS
Начиная с ES20 JSX включен в JavaScript и все будет работать “из коробки”
Внутрь React CORE добавлен специальный пакет, который парсит JSX и превращает в обычный JS

---------------------------------------------------------------------------------------------
20. Что такое Redux Toolkit?

Плагин для VS Code, в котором содержатся сниппеты для работы с Redux
Расширение для браузера, упрощающее разработку
Полное название Redux
Пакет, позволяющий работать Redux вместе с React
+++Библиотека, которая предоставляет набор инструментов, облегчающий работу с Redux

---------------------------------------------------------------------------------------------
21. Какая функция сработает при “размонтировании” компонента?

Функция, переданная в хук useCallback()
Функция, переданная в хук useUnmount()
+++Функцию, которую вернули из callback, переданного в хук useEffect()
Функция, переданная в хук useEffect()

Правильный ответ
Функцию, которую вернули из callback, переданного в хук useEffect()

---------------------------------------------------------------------------------------------
22. Чем React.memo отличается от useMemo()?

+++useMemo() позволяет мемоизировать значения, а React.memo целые компоненты
Это одно и то же. До появления React Hooks использовался React.memo
Это одно и то же. В классовых компонентах используется React.memo, а в функциональных – useMemo()
React.memo позволяет мемоизировать значения, а useMemo() целые компоненты

---------------------------------------------------------------------------------------------
23. Чем Action отличается от Reducer?

Action является частью Reducer и отвечает за оптимизацию работы Redux
Reducer является частью Action и отвечает за оптимизацию работы Redux
Reducer – объект, описывающий, что произошло в приложении. Action – функция, принимающая текущее состояние и возвращающая новое
+++Action – объект, описывающий, что произошло в приложении. Reducer – функция, принимающая текущее состояние и возвращающая новое

---------------------------------------------------------------------------------------------
24. Хук useDispatch() позволяет…


добавлять новые слушатели на какое-либо событие
сгенерировать новый Action, который в дальнейшем можно будет передать в dispatch()
+++получить функцию dispatch()
Нет верного ответа

Правильный ответ
получить функцию dispatch()

---------------------------------------------------------------------------------------------
25. Хук useSelector() позволяет…


Получать DOM элемент по какому-либо селектору
Точечно обновлять данные из store
+++Позволяет извлекать данные из Redux store
Нет верного ответа

---------------------------------------------------------------------------------------------
26. Для чего нужен Thunk?


Thunk – библиотека, которая предоставляет набор инструментов, облегчающий работу с Redux
Thunk – middleware, позволяющее Redux оптимизировать ресурсоемкие операции
Для совместной работы Redux вместе с React
+++Для более удобной работы с асинхронными действиями

---------------------------------------------------------------------------------------------
27. Чем Mongoose отличается от MongoDB?


Mongoose – документоориентированная система управления базами данных. MongoDB – библиотека JavaScript для моделирования объектных данных MongoDB
MongoDB – облачная база данных, Mongoose – локальная (можно установить как пакет)
+++MongoDB – документоориентированная система управления базами данных. Mongoose – библиотека JavaScript для моделирования объектных данных MongoDB
Нет верного ответа

---------------------------------------------------------------------------------------------
28. Чем Docker container отличается от image?


Container – хранилище образов приложения, позволяет развернуть приложение на любой машине
Image – инструмент управления контейнерами, позволяет их запускать
Container – образ приложения. Image – экземпляр образа
+++Image – образ приложения. Container – экземпляр образа

Правильный ответ
Image – образ приложения. Container – экземпляр образа

---------------------------------------------------------------------------------------------
29. Чем Access токен отличается от Refresh токена?


Refresh токен нужен для идентификации пользователя. Access токен нужен для обновления не актуального Refresh токена
Access токен дает пользователю права на чтение/запись данных. Refresh токен запрашивает новый Access токен при каждом обновлении страницы
+++Access токен нужен для идентификации пользователя. Refresh токен нужен для обновления не актуального Access токена
Access токен позволяет читать данные. Refresh токен позволяет обновить данные

---------------------------------------------------------------------------------------------
30. Для чего нужен модуль FS в Node.js?


Позволяет взаимодействовать с файловой системой способом, смоделированным на основе стандартных функций POSIX
Предоставляет служебные методы и свойства, относящиеся к операционной системе
Предоставляет утилиты для работы с путями к файлам и каталогам
Нет верного ответа

---------------------------------------------------------------------------------------------
31. Что такое EJS?


Надстройка над языком, ejs код конвертируется в обычный js
Название парсера JS в среде браузера
Express.js - пакет, позволяющий реализовывать веб серверы
Шаблонизатор

---------------------------------------------------------------------------------------------
32. Для чего нужен Nodemon?


Оптимизации работы сервера
Отслеживания изменений исходном коде и автоматической перезагрузки сервера
Добавления дополнительных возможностей у сервера
Ускорения работы Node.js

---------------------------------------------------------------------------------------------
33. Как правильно передать параметры в обработчик события?


<button onClick={handleClick(params)}></button>
+++<button onClick={() => handleClick(params)}></button>
<button onClick="() => handleClick(params)"></button>
<button onClick="handleClick(params)"></button>

---------------------------------------------------------------------------------------------
34. Зачем нужен React.Fragment?


Для извлечения определенного фрагмента шаблона из компонента
Для создания простых компонентов
+++Для группировки нескольких дочерних элементов, не создавая лишних узлов в DOM
Нет верного ответа

---------------------------------------------------------------------------------------------
35. Различия между props и state?


state передаётся в компонент (служат как параметры функции), а props находится внутри компонента (по аналогии с переменными, которые объявлены внутри функции)
+++props передаётся в компонент (служат как параметры функции), а state находится внутри компонента (по аналогии с переменными, которые объявлены внутри функции)
В state нужно хранить реактивные данные, а в props не реактивные
state используется в новых версиях React вместо props

---------------------------------------------------------------------------------------------
36. Чему будет равен counter после вызова handleIncrement?
const [counter, setCounter] = useState(0)
const handleIncrement = () => {
  setCounter(counter + 1)
  setCounter(counter + 1)
  setCounter(counter + 1)
}

0
+1
3

---------------------------------------------------------------------------------------------
37. С помощью документации PropTypes выберите, какой вариант верный для проверки на массив, где каждый элемент является числом:


+++PropTypes.arrayOf(PropTypes.number);
PropTypes.isArray(PropTypes.isNumber);
PropTypes.arrayContains(PropTypes.number);
PropTypes.arrayOf(PropTypes.num);

---------------------------------------------------------------------------------------------
38. Для получения query параметра id в пути /users/:id необходимо использовать:


const { id } = useHistory();
const { id } = useParams();
const { id } = props;
const id = useParams();

---------------------------------------------------------------------------------------------
39. Управляемые компоненты - это...


Компоненты, которые имеют собственное состояние, выводят дочерние компоненты и управляют ими
Компоненты, состояние которых управляется браузером
Компоненты, состояние которых управляется самим React
Компоненты, не имеющие собственного состояния

---------------------------------------------------------------------------------------------
40. Какой вид отношений между сущностями?
[
  {
    id: '1',
    name: 'asdsa',
    code: 'asdasdsad'
  },
  {
    id: '2',
    name: 'asdsa',
    code: 'asdasdsad'
  },
  {
    id: '3',
    name: 'asdsa',
    code: 'asdasdsad'
  }
]
{
  id: 'fdshgdfga',
  nameOfPlace: 'string',
  services: ['1', '2', '3']
}
One-to-One
+++One-to-Many
Many-to-Many

Правильный ответ
One-to-Many

---------------------------------------------------------------------------------------------
41. Кастомный хук в React - это…


Функция, которая выполнится в определенный момент жизненного цикла компонента
Механизм, с помощью которого мы можем подписаться на определенное событие и выполнять какое-либо действие в определенный момент времени
+++Механизм повторного использования логики. Можно вынести какую-то логику компонента и повторно ее переиспользовать
Нет верного ответа

Правильный ответ
Механизм повторного использования логики. Можно вынести какую-то логику компонента и повторно ее переиспользовать

---------------------------------------------------------------------------------------------
42. Axios interceptors позволяют:


+++Видоизменять URL перед отправкой запроса на него
+++Видоизменять полученные данные с сервера
+++Обрабатывать ошибки
Нет верного ответа


Правильный ответ
Видоизменять URL перед отправкой запроса на него
Видоизменять полученные данные с сервера
Обрабатывать ошибки

---------------------------------------------------------------------------------------------
43. JWT (JSON Web Token) - это…

Безопасный способ хранения JSON в браузере
Более современный способ передачи JSON по интернету
+++Стандартизированный формат упаковки данных, который используется для безопасной передачи информации между двумя сторонами
Нет верного ответа

---------------------------------------------------------------------------------------------
44. Нужно ли дополнительно устанавливать Thunk при работе с Redux Toolkit?


Да
+++Нет

Правильный ответ
Нет

---------------------------------------------------------------------------------------------
45. CORS - это...

+++Технология позволяющая предоставить веб-страницам доступ к ресурсам другого домена
Механизм, позволяющий защищать API ключи на фронтенде
Механизм, позволяющий отправлять данные на сервер
Нет верного ответа


 */