/*

------------------------------------------------------------------------------------
    Что такое JSX?

JSX — расширение синтаксиса ECMAScript, похожее на XML. По сути, он просто предоставляет синтаксический сахар для React.createElement()

Проверить, как JSX при помощи Babel превращается в обычный JS можно на тут https://senler.ru/a/1v2wj/crxn/20311468

Компонент с JSX

function App() {
    return (
        <div>
        <h1>{'Welcome to React World'}</h1>
        </div>
    );
}

Компонент без JSX

function App() {
    return React.createElement(
        "div",
        null,
        React.createElement("h1", null, 'Welcome to React World')
    );
}
------------------------------------------------------------------------------------
     Как создавать компоненты в React?

Есть два способа создать компонент:
1. При помощи функций
2. При помощи классов

Функциональные компоненты.
Самый простой способ создания компонента. Это функции JavaScript, которые принимают объект props качестве первого параметра и возвращают React-элемент:

function Greeting(props) {
    return <h1>{`Hello, ${props.message}`}</h1>;
}

Классовые компоненты.
Можно использовать ES6 классы для создания компонентов:

class Greeting extends React.Component {
    render() {
        return <h1>{`Hello, ${this.props.message}`}</h1>;
    }
}
------------------------------------------------------------------------------------

    В чем смысл специального атрибута key?

Атрибут позволяет React понимать, какие именно элементы в списке были модифицированы или удалены, что увеличивает производительность рендеринга.
Лучше всего использовать уникальные значения, такие как ID.
Индексы использовать не рекомендуется.

------------------------------------------------------------------------------------

    Что такое Context?

Context — позволяет передавать свойства от родителя к ребенку, избегая промежуточных компонентов.

------------------------------------------------------------------------------------
   Какие библиотеки менеджмента состояния React-приложения вы знаете? Зачем они нужны?


------------------------------------------------------------------------------------
    Как бы ты построил хорошую архитектуру проекта на React?


------------------------------------------------------------------------------------
    В чем разница между функциональными и классовыми компонентами?



------------------------------------------------------------------------------------
    Расскажи про основные библиотеки React, которые ты знаешь. Какие у них плюсы и минусы?



------------------------------------------------------------------------------------


  Что такое фрагменты?

Специальный элемент в React позволяющий возвращать группу элементов без дополнительного родительского DOM элемента


---------------------------------------------------------------------------------------------

  Что такое строгий режим в React?

React.StrictMode — компонент для выявления потенциальных проблем в приложении.
Так же, как <Fragment>, <StrictMode> не добавляет каких-либо дополнительных элементов DOM.
Применимы только для режима разработки.


---------------------------------------------------------------------------------------------

  Что такое порталы в React?

Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента.

ReactDOM.createPortal(child, container)

Где первый аргумент — любой React-компонент, который может быть отрендерен.
Второй аргумент — это DOM-элемент.



---------------------------------------------------------------------------------------------

  Что такое селекторы Redux и зачем их использовать?

Селекторы — геттеры для получения некоторых частей из целого state. Например, чтобы получить данные о пользователе:

const getUserData = state => state.user;



---------------------------------------------------------------------------------------------

  В чем разница между Shadow DOM и Virtual DOM?

Теневой DOM (Shadow DOM) — технология браузера, разработанная в первую очередь для установки области видимости переменных и CSS в веб-компонентах.

Виртуальный DOM (Virtual DOM) — концепция, реализованная JavaScript-библиотеками поверх API браузера.



---------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------




------------------------------------------------------------------------------------




------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------



------------------------------------------------------------------------------------



------------------------------------------------------------------------------------





------------------------------------------------------------------------------------





------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------




------------------------------------------------------------------------------------



------------------------------------------------------------------------------------



------------------------------------------------------------------------------------





------------------------------------------------------------------------------------




------------------------------------------------------------------------------------




------------------------------------------------------------------------------------






------------------------------------------------------------------------------------





------------------------------------------------------------------------------------




------------------------------------------------------------------------------------





------------------------------------------------------------------------------------





------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------



------------------------------------------------------------------------------------



------------------------------------------------------------------------------------




------------------------------------------------------------------------------------





------------------------------------------------------------------------------------





------------------------------------------------------------------------------------




------------------------------------------------------------------------------------




------------------------------------------------------------------------------------





------------------------------------------------------------------------------------





------------------------------------------------------------------------------------






------------------------------------------------------------------------------------


*/